name: Deploy OpenTelemetry to EKS

on:
  workflow_dispatch:
  repository_dispatch:
    types: [deploy_otel]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout deployment repo
        uses: actions/checkout@v3

      - name: Clone Helm chart repository (Repo 2)
        run: |
          git clone https://github.com/shreya13p/opentelemetry-helm-charts.git

      - name: Set up Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Set up kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name ${{ secrets.CLUSTER_NAME }}

      - name: Add Helm repositories
        run: |
          helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add opensearch https://opensearch-project.github.io/helm-charts
          helm repo update

      - name: Build Helm chart dependencies
        run: |
          helm dependency build ./opentelemetry-helm-charts/charts/opentelemetry-demo

      - name: Deploy Helm chart with atomic rollback
        run: |
          set -e
          helm upgrade otel-release ./opentelemetry-helm-charts/charts/opentelemetry-demo \
            --install \
            --namespace monitoring \
            --create-namespace \
            --timeout 300s \
            --atomic

      - name: Patch frontend to ClusterIP and frontend-proxy to LoadBalancer
        run: |
          kubectl patch svc frontend -n monitoring -p '{"spec":{"type":"ClusterIP"}}'
          kubectl patch svc frontend-proxy -n monitoring -p '{"spec":{"type":"LoadBalancer"}}'

      - name: Wait for frontend-proxy external IP
        run: |
          echo "‚è≥ Waiting for LoadBalancer external IP..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get svc frontend-proxy -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
            if [ -n "$EXTERNAL_IP" ]; then
              echo "Frontend URL: http://$EXTERNAL_IP:8080"
              echo "FRONTEND_URL=http://$EXTERNAL_IP:8080" >> $GITHUB_ENV
              break
            fi
            echo "Waiting for LoadBalancer IP ($i)..."
            sleep 10
          done

      - name: Check pod status and rollback if necessary
        run: |
          echo "üîç Verifying pod health..."
          NOT_RUNNING=$(kubectl get pods -n monitoring --field-selector=status.phase!=Running --no-headers | wc -l)
          if [ "$NOT_RUNNING" -gt 0 ]; then
            echo "‚ùå Detected $NOT_RUNNING pods not in 'Running' state. Initiating rollback..."
            helm rollback otel-release --namespace monitoring
            exit 1
          else
            echo "‚úÖ All pods are in Running state."
          fi
